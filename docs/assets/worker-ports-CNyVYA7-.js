(function(M,S){"use strict";var s=63710088e-1,E={centimeters:s*100,centimetres:s*100,degrees:s/111325,feet:s*3.28084,inches:s*39.37,kilometers:s/1e3,kilometres:s/1e3,meters:s,metres:s,miles:s/1609.344,millimeters:s*1e3,millimetres:s*1e3,nauticalmiles:s/1852,radians:1,yards:s*1.0936};function L(t,e,a){a===void 0&&(a={});var r={type:"Feature"};return(a.id===0||a.id)&&(r.id=a.id),a.bbox&&(r.bbox=a.bbox),r.properties={},r.geometry=t,r}function g(t,e,a){if(a===void 0&&(a={}),!t)throw new Error("coordinates is required");if(!Array.isArray(t))throw new Error("coordinates must be an Array");if(t.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!w(t[0])||!w(t[1]))throw new Error("coordinates must contain numbers");var r={type:"Point",coordinates:t};return L(r,e,a)}function R(t,e){e===void 0&&(e="kilometers");var a=E[e];if(!a)throw new Error(e+" units is invalid");return t*a}function h(t){var e=t%360;return e*Math.PI/180}function w(t){return!isNaN(t)&&t!==null&&!Array.isArray(t)}function b(t){if(!t)throw new Error("coord is required");if(!Array.isArray(t)){if(t.type==="Feature"&&t.geometry!==null&&t.geometry.type==="Point")return t.geometry.coordinates;if(t.type==="Point")return t.coordinates}if(Array.isArray(t)&&t.length>=2&&!Array.isArray(t[0])&&!Array.isArray(t[1]))return t;throw new Error("coord must be GeoJSON Point or an Array of numbers")}function q(t,e,a){a===void 0&&(a={});var r=b(t),n=b(e),o=h(n[1]-r[1]),l=h(n[0]-r[0]),c=h(r[1]),u=h(n[1]),i=Math.pow(Math.sin(o/2),2)+Math.pow(Math.sin(l/2),2)*Math.cos(c)*Math.cos(u);return R(2*Math.atan2(Math.sqrt(i),Math.sqrt(1-i)),a.units)}function F(t){const e={historical:new Set(["archaeological site","archaeological park","Roman archaeological site","Roman bridge","ancient city","ancient monument","ancient port","historic district","historic site","monument","ruins","Samian Ware Discovery Site","cultural heritage","cultural heritage ensemble","cultural property","archaeological artifact museum","archaeological park","architectural ensemble","architectural heritage monument","architectural landmark","former neighbourhood","former settlement","ghost town","historic district","historic site","old town","settlement site"]),seaport:new Set(["port","commercial port","fishing port","military port","container terminal","cruise port","dry marina","deep water port","guest harbor","inland port","historical port","oil port","sea terminal","trust port","regional port","major port","priority port","harbor","dock","wet dock","port city","port of entry","specified port","port of refuge","port and harbour facilities (Japan)","international strategic port","international hub port (Japan)"]),settlement:new Set(["city","town","village","hamlet","neighborhood","suburb","urban area","urban-type settlement in Russia","urban area in Sweden","quarter","district","posyolok","frazione","ward","borough","civil parish","district of city","barrio","gazetted locality of Victoria","locality","community","census-designated place in the United States","city or town","city of oblast significance","city/town in Russia","neighborhood of Buenos Aires","suburb/locality of Tasmania","village in Finland","village of Senegal","urban area in Sweden","unparished area","large burgh"]),naval:new Set(["naval base","naval station","naval air station","naval aeronautics base","Royal Navy Dockyard","submarine base","submarine pen","naval arsenal"]),industrial:new Set(["shipyard","marine oil terminal","oil depot","fuel depot","liquefied natural gas terminal","floating regasification terminal","liquefaction terminal","regasification terminal"]),marina:new Set(["marina","berth","bathing site","overnight stay harbour"])},a=t.name||"";if(/^Q\d+$/.test(a.trim()))return null;const r=t.types.map(l=>l.trim()),n=Object.entries(e).filter(([l,c])=>r.some(u=>c.has(u))).map(([l])=>l);if(n.length===0)return null;const o=Object.keys(e);return n.sort((l,c)=>o.indexOf(l)-o.indexOf(c)),{...t,categories:n,types:r}}const v=`
    SELECT ?port ?portLabel ?coord ?countryLabel ?typeLabel
    WHERE {
      ?port wdt:P31/wdt:P279* wd:Q44782.
      ?port wdt:P625 ?coord.
      ?port wdt:P17 ?country.
      ?port wdt:P31 ?type.
      SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en". }
    }
    LIMIT 10000
`,d=new S("PortsDB");d.version(3).stores({ports:"wikidata, name, country, lat, lon, types, categories",metadata:"key"});const k="2025-07-05:09:32";async function T(t,e){await d.metadata.put({key:t,value:e})}async function C(t){const e=await d.metadata.get(t);return e?e.value:null}async function O(){var l,c,u;const t=M.sparqlQuery(v),a=await(await fetch(t)).json(),r=new Map;for(const i of a.results.bindings){const y=i.port.value,m=i.coord.value.match(/Point\(([-\d.]+) ([-\d.]+)\)/);if(!m)continue;const[,p,f]=m;r.has(y)||r.set(y,{wikidata:y,name:((l=i.portLabel)==null?void 0:l.value)??"",country:((c=i.countryLabel)==null?void 0:c.value)??"",lat:parseFloat(f),lon:parseFloat(p),types:new Set}),(u=i.typeLabel)!=null&&u.value&&r.get(y).types.add(i.typeLabel.value)}const n=[...r.values()].map(i=>({...i,types:[...i.types]}));console.debug(`Fetched ${n.length} ports from Wikidata.`);const o=n.map(F).filter(Boolean);return console.debug(`Filtered and classified to ${o.length} ports.`),await d.ports.clear(),await d.ports.bulkPut(o),await T("version",k),o.length}async function N(){if(await C("version")!==k){const e=await O();postMessage({type:"info",message:`Loaded ${e} ports from Wikidata.`})}else postMessage({type:"info",message:"Using cached ports data."});return v}async function A(t,e,a,r){return await d.ports.where("lat").between(e,r,!0,!0).and(n=>n.lon>=t&&n.lon<=a).toArray()}function P(t){return{type:"Feature",geometry:{type:"Point",coordinates:[t.lon,t.lat]},properties:{name:t.name,wikidata:t.wikidata,country:t.country,types:t.types,categories:t.categories}}}async function x(t,e=.1,a=1){const[r,n]=t,o=r-e,l=r+e,c=n-e,u=n+e,i=await A(o,c,l,u);if(i.length===0)return[];const y=g([r,n]),m=i.map(p=>{const f=g([p.lon,p.lat]),U=q(y,f,{units:"kilometers"});return{...p,dist:U}});return m.sort((p,f)=>p.dist-f.dist),m.slice(0,a)}async function I(t){if(t&&t.length===4){const[e,a,r,n]=t;return{type:"FeatureCollection",features:(await A(e,a,r,n)).map(P)}}else return{type:"FeatureCollection",features:(await d.ports.toArray()).map(P)}}self.addEventListener("message",async t=>{const{type:e,payload:a}=t.data;try{switch(e){case"init":const r=await N();postMessage({type:"ready",query:r});break;case"closest":const n=await x(a.point,a.bufferDeg,a.maxResults);postMessage({type:"closestResult",data:n});break;case"all":const o=await I(a==null?void 0:a.bbox);postMessage({type:"allResult",data:o});break;default:postMessage({type:"error",message:`Unknown message type: ${e}`})}}catch(r){postMessage({type:"error",message:r.message})}})})(wdk,Dexie);
